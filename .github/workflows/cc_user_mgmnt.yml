name: CI - CC Spring Boot Backend

on:
  workflow_dispatch: ~
  push:
    branches:
      - 'care-connect'
      - 'care-connect-develop'
    paths:
      - '**backend/**'
  pull_request:
    branches:
      - 'care-connect'
      - 'care-connect-develop'
    paths:
      - '**backend/**'

jobs:
  build-all:
    environment: aws
    runs-on: ubuntu-latest
    concurrency: 
      group: 'ci-cc-backend-${{ github.ref }}'
    steps:
      - name: Check out
        id: checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'  
      - name: Build with Maven
        working-directory: ./careconnect2025/backend/core
        shell: bash
        run: mvn clean package --batch-mode -DskipTests
        env:
          APP_FRONTEND_BASE_URL: ${{secrets.APP_FRONTEND_BASE_URL}}
          BASE_URL: ${{secrets.BASE_URL}}
          CORS_ALLOWED_LIST: ${{secrets.CORS_ALLOWED_LIST}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_USER: ${{secrets.DB_USER}}
          EMAIL_PROVIDER: ${{secrets.EMAIL_PROVIDER}}
          FITBIT_CLIENT_ID: ${{secrets.FITBIT_CLIENT_ID}}
          FITBIT_CLIENT_SECRET: ${{secrets.FITBIT_CLIENT_SECRET}}
          FROM_EMAIL: ${{secrets.FROM_EMAIL}}
          GOOGLE_AUTH_URI: ${{secrets.GOOGLE_AUTH_URI}}
          GOOGLE_CLIENT_ID: ${{secrets.GOOGLE_CLIENT_ID}}
          GOOGLE_CLIENT_NAME: ${{secrets.GOOGLE_CLIENT_NAME}}
          GOOGLE_CLIENT_SECRET: ${{secrets.GOOGLE_CLIENT_SECRET}}
          GOOGLE_REDIRECT_URI: ${{secrets.GOOGLE_REDIRECT_URI}}
          GOOGLE_SCOPE: ${{secrets.GOOGLE_SCOPE}}
          GOOGLE_TOKEN_URI: ${{secrets.GOOGLE_TOKEN_URI}}
          GOOGLE_USERINFO_URI: ${{secrets.GOOGLE_USERINFO_URI}}
          JDBC_URI: ${{secrets.JDBC_URI}}
          JWT_EXPIRATION: ${{secrets.JWT_EXPIRATION}}
          LOGGING_LEVEL: ${{secrets.LOGGING_LEVEL}}
          MAIL_HOST: ${{secrets.MAIL_HOST}}
          MAIL_PASSWORD: ${{secrets.MAIL_PASSWORD}}
          MAIL_PORT: ${{secrets.MAIL_PORT}}
          MAIL_SMTP_AUTH: ${{secrets.MAIL_SMTP_AUTH}}
          MAIL_SMTP_STARTTLS: ${{secrets.MAIL_SMTP_STARTTLS}}
          MAIL_USERNAME: ${{secrets.MAIL_USERNAME}}
          OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
          SECURITY_JWT_SECRET: ${{secrets.SECURITY_JWT_SECRET}}
          SENDGRID_API_KEY: ${{secrets.SENDGRID_API_KEY}}
          SPRING_JPA_SHOW_SQL: ${{secrets.SPRING_JPA_SHOW_SQL}}
          STRIPE_SECRET_KEY: ${{secrets.STRIPE_SECRET_KEY}}
          STRIPE_WEBHOOK_SIGNING_SECRET: ${{secrets.STRIPE_WEBHOOK_SIGNING_SECRET}}
      - name: Rename zip
        id: rename
        run: mvn ./backend/core/target/*.zip cc-core-b-for-lambda-v${{ github.run_number }}.zip
      - name: upload zip
        uses: actions/upload-artifact@v4
        with:
          name: cc-core-backend
          path: cc-core-b-for-lambda-v${{ github.run_number }}.zip
          retention-days: 15

      
  create-release:
    runs-on: ubuntu-latest
    needs: build-all
    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/develop')

    steps:
      - name: Get the Zip
        uses: actions/download-artifact@v4
        with:
          name: cc-core-backend

      - name: Create Release
        uses: actions/create-release@latest
        with:
          tag_name: cc-v${{ github.run_number }}
          release_name: CC-B R-v${{ github.run_number }}
          body_path: cc-core-b-for-lambda-v${{ github.run_number }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
